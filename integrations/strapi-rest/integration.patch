diff --git a/core/.env.example b/core/.env.example
index b0425c70..5f802f0a 100644
--- a/core/.env.example
+++ b/core/.env.example
@@ -34,3 +34,9 @@ TURBO_REMOTE_CACHE_SIGNATURE_KEY=
 # https://nextjs.org/docs/app/building-your-application/caching#data-cache
 # This sets a sensible revalidation target for cached requests
 NEXT_PUBLIC_DEFAULT_REVALIDATE_TARGET=3600
+
+# Strapi config
+# Follow instructions here to set up Strapi instance with matching data models for this integration:
+# https://github.com/bigcommerce-labs/catalyst-strapi-backend
+STRAPI_BASE_URL=http://127.0.0.1:1337
+STRAPI_API_KEY=
diff --git a/core/app/[locale]/(default)/blog/[blogId]/page-data.ts b/core/app/[locale]/(default)/blog/[blogId]/page-data.ts
index 47701103..1014c84f 100644
--- a/core/app/[locale]/(default)/blog/[blogId]/page-data.ts
+++ b/core/app/[locale]/(default)/blog/[blogId]/page-data.ts
@@ -1,56 +1,25 @@
 import { cache } from 'react';
+import { getNewsPost } from '~/lib/strapi/data-fetcher';
 
-import { client } from '~/client';
-import { graphql } from '~/client/graphql';
-import { revalidate } from '~/client/revalidate-target';
+export const getBlogPageData = cache(
+  async ({ entityId, locale }: { entityId: number; locale: string | undefined }) => {
+    const blogPost = await getNewsPost({ blogId: entityId.toString(), locale });
 
-import { SharingLinksFragment } from './_components/sharing-links';
-
-const BlogPageQuery = graphql(
-  `
-    query BlogPageQuery($entityId: Int!) {
-      site {
-        content {
-          blog {
-            post(entityId: $entityId) {
-              author
-              htmlBody
-              name
-              publishedDate {
-                utc
-              }
-              tags
-              thumbnailImage {
-                altText
-                url: urlTemplate
-              }
-              seo {
-                pageTitle
-                metaDescription
-                metaKeywords
-              }
-            }
-          }
-        }
-        ...SharingLinksFragment
-      }
+    if (!blogPost) {
+      return null;
     }
-  `,
-  [SharingLinksFragment],
-);
-
-export const getBlogPageData = cache(async ({ entityId }: { entityId: number }) => {
-  const response = await client.fetch({
-    document: BlogPageQuery,
-    variables: { entityId },
-    fetchOptions: { next: { revalidate } },
-  });
 
-  const { blog } = response.data.site.content;
-
-  if (!blog?.post) {
-    return null;
-  }
-
-  return response.data.site;
-});
+    return {
+      content: {
+        blog: {
+          post: { ...blogPost, entityId },
+        },
+      },
+      settings: {
+        url: {
+          vanityUrl: blogPost.vanityUrl,
+        },
+      },
+    };
+  },
+);
diff --git a/core/app/[locale]/(default)/blog/[blogId]/page.tsx b/core/app/[locale]/(default)/blog/[blogId]/page.tsx
index 3edd5ac4..4b7c2c40 100644
--- a/core/app/[locale]/(default)/blog/[blogId]/page.tsx
+++ b/core/app/[locale]/(default)/blog/[blogId]/page.tsx
@@ -1,6 +1,7 @@
 import type { Metadata } from 'next';
 import { notFound } from 'next/navigation';
 import { getFormatter } from 'next-intl/server';
+import { unstable_setRequestLocale } from 'next-intl/server';
 
 import { BcImage } from '~/components/bc-image';
 import { Link } from '~/components/link';
@@ -9,35 +10,32 @@ import { LocaleType } from '~/i18n/routing';
 
 import { SharingLinks } from './_components/sharing-links';
 import { getBlogPageData } from './page-data';
+import { StrapiBlocksClientRenderer } from '~/lib/strapi/client-components';
 
 interface Props {
   params: {
     blogId: string;
-    locale?: LocaleType;
+    locale: LocaleType;
   };
 }
 
-export async function generateMetadata({ params: { blogId } }: Props): Promise<Metadata> {
-  const data = await getBlogPageData({ entityId: Number(blogId) });
+export async function generateMetadata({ params: { blogId, locale } }: Props): Promise<Metadata> {
+  const data = await getBlogPageData({ entityId: Number(blogId), locale });
   const blogPost = data?.content.blog?.post;
 
-  if (!blogPost) {
-    return {};
-  }
-
-  const { pageTitle, metaDescription, metaKeywords } = blogPost.seo;
+  const title = blogPost?.seo.pageTitle ?? 'Blog';
 
   return {
-    title: pageTitle || blogPost.name,
-    description: metaDescription,
-    keywords: metaKeywords ? metaKeywords.split(',') : null,
+    title,
   };
 }
 
 export default async function BlogPostPage({ params: { blogId, locale } }: Props) {
+  unstable_setRequestLocale(locale);
+
   const format = await getFormatter({ locale });
 
-  const data = await getBlogPageData({ entityId: Number(blogId) });
+  const data = await getBlogPageData({ entityId: Number(blogId), locale });
   const blogPost = data?.content.blog?.post;
 
   if (!blogPost) {
@@ -79,7 +77,10 @@ export default async function BlogPostPage({ params: { blogId, locale } }: Props
         </div>
       )}
 
-      <div className="mb-10 text-base" dangerouslySetInnerHTML={{ __html: blogPost.htmlBody }} />
+      <div className="mb-10 space-y-4 text-base">
+        <StrapiBlocksClientRenderer content={blogPost.content} />
+      </div>
+
       <div className="mb-10 flex">
         {blogPost.tags.map((tag) => (
           <Link className="me-3 block cursor-pointer" href={`/blog/tag/${tag}`} key={tag}>
diff --git a/core/app/[locale]/(default)/blog/page-data.ts b/core/app/[locale]/(default)/blog/page-data.ts
index 5ce86f84..8efa0a3d 100644
--- a/core/app/[locale]/(default)/blog/page-data.ts
+++ b/core/app/[locale]/(default)/blog/page-data.ts
@@ -1,13 +1,10 @@
-import { removeEdgesAndNodes } from '@bigcommerce/catalyst-client';
 import { cache } from 'react';
 
-import { client } from '~/client';
-import { graphql } from '~/client/graphql';
-import { revalidate } from '~/client/revalidate-target';
-import { BlogPostCardFragment } from '~/components/blog-post-card';
+import { getNewsPosts } from '~/lib/strapi/data-fetcher';
 
 interface BlogPostsFiltersInput {
   tagId?: string;
+  locale?: string;
 }
 
 interface Pagination {
@@ -16,65 +13,14 @@ interface Pagination {
   after?: string;
 }
 
-const BlogPostsPageQuery = graphql(
-  `
-    query BlogPostsPageQuery(
-      $first: Int
-      $after: String
-      $last: Int
-      $before: String
-      $filters: BlogPostsFiltersInput
-    ) {
-      site {
-        content {
-          blog {
-            name
-            description
-            posts(first: $first, after: $after, last: $last, before: $before, filters: $filters) {
-              edges {
-                node {
-                  entityId
-                  ...BlogPostCardFragment
-                }
-              }
-              pageInfo {
-                hasNextPage
-                hasPreviousPage
-                startCursor
-                endCursor
-              }
-            }
-          }
-        }
-      }
-    }
-  `,
-  [BlogPostCardFragment],
-);
-
 export const getBlogPosts = cache(
-  async ({ tagId, limit = 9, before, after }: BlogPostsFiltersInput & Pagination) => {
-    const filterArgs = tagId ? { filters: { tags: [tagId] } } : {};
-    const paginationArgs = before ? { last: limit, before } : { first: limit, after };
-
-    const response = await client.fetch({
-      document: BlogPostsPageQuery,
-      variables: { ...filterArgs, ...paginationArgs },
-      fetchOptions: { next: { revalidate } },
-    });
-
-    const { blog } = response.data.site.content;
+  async ({ tagId, limit = 9, before, after, locale }: BlogPostsFiltersInput & Pagination) => {
+    const blogPosts = await getNewsPosts({ tagId, limit, before, after, locale })
 
-    if (!blog) {
+    if (!blogPosts) {
       return null;
     }
 
-    return {
-      ...blog,
-      posts: {
-        pageInfo: blog.posts.pageInfo,
-        items: removeEdgesAndNodes(blog.posts),
-      },
-    };
+    return blogPosts;
   },
 );
diff --git a/core/app/[locale]/(default)/customer-service/[slug]/page.tsx b/core/app/[locale]/(default)/customer-service/[slug]/page.tsx
new file mode 100644
index 00000000..6d2a5579
--- /dev/null
+++ b/core/app/[locale]/(default)/customer-service/[slug]/page.tsx
@@ -0,0 +1,86 @@
+import { BlocksRenderer, type BlocksContent } from '@strapi/blocks-react-renderer';
+import { unstable_setRequestLocale } from 'next-intl/server';
+import { Link } from '~/components/link';
+import { LocaleType } from '~/i18n/routing';
+import { fetchStrapiData } from '~/lib/strapi/data-fetcher';
+
+interface Props {
+  params: { locale: LocaleType; slug: string };
+}
+
+export default async function Home({ params: { locale, slug } }: Props) {
+  unstable_setRequestLocale(locale);
+
+  const strapiSiteContentData = await fetchStrapiData({
+    endpoint: `/api/static-site-content?locale=${locale}`,
+  });
+  const strapiQuestionCategoriesData = await fetchStrapiData({
+    endpoint: `/api/question-categories?locale=${locale}`,
+  });
+  const strapiQuestionCategoryData = await fetchStrapiData({
+    endpoint: `/api/question-categories?locale=${locale}&filters[slug][$eq]=${slug}&populate=*`,
+  });
+  const strapiQuestionAnswerData = await fetchStrapiData({
+    endpoint: `/api/customer-service-questions?locale=${locale}&filters[category][id][$eq]=${strapiQuestionCategoryData.data[0].id}`,
+  });
+
+  return (
+    <main className="mx-auto max-w-5xl py-4">
+      <div className="flex flex-col md:flex-row">
+        <div className="w-full flex-none md:w-64">
+          <Link
+            href={`/customer-service/`}
+            className="mb-4 mt-2 flex items-center text-black hover:text-primary"
+          >
+            <svg
+              className="-ml-2 mr-2 h-5 w-5 fill-current"
+              xmlns="http://www.w3.org/2000/svg"
+              viewBox="0 0 20 20"
+            >
+              <path
+                fill-rule="evenodd"
+                d="M12.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L9.414 10l3.293 3.293a1 1 0 010 1.414z"
+                clip-rule="evenodd"
+              />
+            </svg>
+            {strapiSiteContentData.data.attributes.customer_service_title}
+          </Link>
+          {strapiQuestionCategoriesData.data?.map((post: any) => {
+            const { name, slug } = post.attributes;
+            return (
+              <>
+                {strapiQuestionCategoryData.data[0].id === post.id && (
+                  <h5 className="mb-5 border-l-2 pl-2 text-lg font-semibold text-black">{name}</h5>
+                )}
+                {strapiQuestionCategoryData.data[0].id != post.id && (
+                  <Link href={`/customer-service/${slug}`}>
+                    <h5 className="mb-5 border-l-2 border-transparent pl-2 text-lg text-black hover:text-secondary">
+                      {name}
+                    </h5>
+                  </Link>
+                )}
+              </>
+            );
+          })}
+        </div>
+        <div className="flex-auto">
+          <section className="max-w-prose">
+            <div className="mx-auto md:px-4 md:px-6 lg:px-8">
+              {strapiQuestionAnswerData.data?.map((post: any) => {
+                const { question, answer } = post.attributes;
+                return (
+                  <>
+                    <h1 className="text-3xl font-bold">{question}</h1>
+                    <p className="mb-12 mt-4 flex flex-col space-y-4 text-lg">
+                      <BlocksRenderer content={answer} />
+                    </p>
+                  </>
+                );
+              })}
+            </div>
+          </section>
+        </div>
+      </div>
+    </main>
+  );
+}
diff --git a/core/app/[locale]/(default)/customer-service/page.tsx b/core/app/[locale]/(default)/customer-service/page.tsx
new file mode 100644
index 00000000..54a634d2
--- /dev/null
+++ b/core/app/[locale]/(default)/customer-service/page.tsx
@@ -0,0 +1,71 @@
+import { unstable_setRequestLocale } from 'next-intl/server';
+import { Link } from '~/components/link';
+import { LocaleType } from '~/i18n/routing';
+import { fetchStrapiData } from '~/lib/strapi/data-fetcher';
+
+interface Props {
+  params: { locale: LocaleType };
+}
+
+export default async function CustomerService({ params: { locale } }: Props) {
+  unstable_setRequestLocale(locale);
+  
+  const strapiSiteContentData = await fetchStrapiData({
+    endpoint: `/api/static-site-content?locale=${locale}`,
+  });
+  const strapiQuestionCategoryData = await fetchStrapiData({
+    endpoint: `/api/question-categories?locale=${locale}`,
+  });
+
+  return (
+    <main className="container mx-auto py-6">
+      <section className="py-10 sm:py-16 lg:py-24">
+        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
+          <div className="mx-auto max-w-2xl text-center">
+            <h2 className="text-3xl font-bold leading-tight text-black sm:text-4xl lg:text-5xl">
+              {strapiSiteContentData.data.attributes.customer_service_title}
+            </h2>
+            <p className="mx-auto mt-4 max-w-xl text-base leading-relaxed text-gray-600">
+              {strapiSiteContentData.data.attributes.customer_service_tagline}
+            </p>
+          </div>
+
+          <div className="mt-12 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:mt-16 lg:grid-cols-3 xl:gap-10">
+            {strapiQuestionCategoryData.data?.map((post: any) => {
+              const { name, description, slug } = post.attributes;
+              return (
+                <>
+                  <Link href={`/customer-service/${slug}`}>
+                    <div className="h-full overflow-hidden rounded bg-white shadow hover:bg-gray-50">
+                      <div className="p-8">
+                        <div className="flex items-center">
+                          <div className="mr-auto">
+                            <p className="text-xl font-semibold text-black">{name}</p>
+                          </div>
+                        </div>
+                        <p className="mt-7 text-base leading-relaxed text-gray-600">
+                          {description}
+                        </p>
+                      </div>
+                    </div>
+                  </Link>
+                </>
+              );
+            })}
+          </div>
+
+          {strapiSiteContentData.data.attributes.customer_service_anchor_text?.length > 0 && (
+            <div className="mt-12 text-center">
+              <Link
+                href={strapiSiteContentData.data.attributes.customer_service_anchor_link}
+                className="inline-flex p-3 font-medium text-blue-600 transition-all duration-200 hover:text-blue-700 hover:underline focus:text-blue-700"
+              >
+                {strapiSiteContentData.data.attributes.customer_service_anchor_text}
+              </Link>
+            </div>
+          )}
+        </div>
+      </section>
+    </main>
+  );
+}
diff --git a/core/lib/strapi/client-components.tsx b/core/lib/strapi/client-components.tsx
new file mode 100644
index 00000000..8d388088
--- /dev/null
+++ b/core/lib/strapi/client-components.tsx
@@ -0,0 +1,50 @@
+'use client';
+import { BlocksRenderer } from '@strapi/blocks-react-renderer';
+import { Link } from '~/components/link';
+
+export function StrapiBlocksClientRenderer({ content }: { content: any }) {
+  return (
+    <BlocksRenderer
+      content={content}
+      blocks={{
+        code: ({ children }) => (
+          <code className="bg-black p-4 text-sm text-white">{children}</code>
+        ),
+        image: ({ image }) => (
+          <img src={image.url} alt={image.alternativeText || undefined} />
+        ),
+        link: ({ children, url }) => <Link href={url}>{children}</Link>,
+        list: ({ children, format }) =>
+          format === 'ordered' ? (
+            <ol className="relative left-4 list-decimal">{children}</ol>
+          ) : (
+            <ul className="relative left-4 list-disc">{children}</ul>
+          ),
+        heading: ({ children, level }) => {
+          switch (level) {
+            case 1:
+              return <h1 className="text-4xl lg:text-5xl">{children}</h1>;
+            case 2:
+              return <h2 className="text-3xl lg:text-4xl">{children}</h2>;
+            case 3:
+              return <h3 className="text-2xl lg:text-3xl">{children}</h3>;
+            case 4:
+              return <h4 className="text-xl lg:text-2xl">{children}</h4>;
+            case 5:
+              return <h5 className="text-lg lg:text-xl">{children}</h5>;
+            case 6:
+              return <h6 className="text-md lg:text-lg">{children}</h6>;
+            default:
+              return <h1 className="lg:text-md text-sm">{children}</h1>;
+          }
+        },
+        quote: ({ children }) => (
+          <blockquote className="border-color-black border-l-2 p-2 pl-4 italic">
+            {children}
+          </blockquote>
+        ),
+        paragraph: ({ children }) => <p>{children}</p>,
+      }}
+    />
+  );
+}
diff --git a/core/lib/strapi/data-fetcher.ts b/core/lib/strapi/data-fetcher.ts
new file mode 100644
index 00000000..a0d85fe6
--- /dev/null
+++ b/core/lib/strapi/data-fetcher.ts
@@ -0,0 +1,139 @@
+export async function getNewsPosts(searchParams: PostsListParams) {
+  const { tagId, limit = 9, before, after = 0, locale = 'en' } = searchParams;
+  const start = before ? parseInt(before) - limit : after;
+  const filter = tagId ? `&filters[tags][title][$eq]=${tagId}` : '';
+
+  const apiResponse = await fetchStrapiData({
+    endpoint: `/api/posts?locale=${locale}&populate=*&pagination[start]=${start}&pagination[limit]=${limit}&sort[0]=publishedAt:desc&${filter}`,
+  });
+
+  if (!apiResponse) {
+    return null;
+  }
+
+  return transformDataToBlogPosts(apiResponse, tagId);
+}
+
+export async function getNewsPost(postParams: SinglePostParams) {
+  const { blogId, locale = 'en' } = postParams;
+
+  const siteContentData = await fetchStrapiData({
+    endpoint: `/api/static-site-content?locale=${locale}`,
+  });
+
+  const apiResponse = await fetchStrapiData({
+    endpoint: `/api/posts/${blogId}?populate=*`,
+  });
+
+  if (!apiResponse) {
+    return null;
+  }
+
+  return transformDataToBlogPost(apiResponse, siteContentData.data.attributes.news_vanity_url);
+}
+
+export async function fetchStrapiData({ endpoint }: fetchStrapiDataParams) {
+  const baseUrl = process.env.STRAPI_BASE_URL;
+  try {
+    const response = await fetch(baseUrl + endpoint, {
+      headers: {
+        Authorization: `Bearer ${process.env.STRAPI_API_KEY}` ?? '',
+      },
+    });
+
+    const data = await response.json();
+
+    if (!response.ok) {
+      throw new Error(`API fetch error: ${response.status}`);
+    }
+
+    return data;
+  } catch (error) {
+    console.error(error);
+  }
+}
+
+// These functions are here primarily here to emulate the BigCommerce responses powering the BlogPost pages by default,
+// so this can drop directly into an existing Catalyst page.
+//
+// e.g.  isVisibleInNavigation value is used in those pages and will render a 404 if it's set to false.
+//
+// That said, the functions do simplify the response used within the page and provide a central place to alter logic.
+
+function transformDataToBlogPosts(apiResponse: StrapiPostsResponse, tagId: string | undefined) {
+  return {
+    name: 'News' + (tagId ? `: ${tagId}` : ''),
+    description: '',
+    posts: {
+      pageInfo: {
+        hasNextPage:
+          apiResponse.meta.pagination.total -
+            (apiResponse.meta.pagination.start + apiResponse.meta.pagination.limit) >
+          0,
+        hasPreviousPage: apiResponse.meta.pagination.start - apiResponse.meta.pagination.limit >= 0,
+        startCursor: apiResponse.meta.pagination.start.toString(),
+        endCursor: (
+          apiResponse.meta.pagination.start + apiResponse.meta.pagination.limit
+        ).toString(),
+      },
+      items: apiResponse.data.map((post) => {
+        let summary = '';
+        post.attributes.content.forEach((contentPart) => {
+          contentPart.children.forEach((child) => {
+            if (child.type === 'text') {
+              summary += child.text + ' ';
+            }
+          });
+        });
+
+        return {
+          author: post.attributes.author,
+          entityId: post.id,
+          name: post.attributes.title,
+          plainTextSummary: `${summary.slice(0, 145)}${summary.length > 145 ? '...' : ''}`,
+          publishedDate: { utc: post.attributes.publishedAt },
+          thumbnailImage: post.attributes.thumbnail.data
+            ? {
+                altText: post.attributes.thumbnail.data.attributes.alternativeText || '',
+                url:
+                  post.attributes.thumbnail.data.attributes.formats.small.url.indexOf('http') === 0
+                    ? `${post.attributes.thumbnail.data.attributes.formats.small.url}`
+                    : `${process.env.STRAPI_BASE_URL}${post.attributes.thumbnail.data.attributes.formats.small.url}`,
+              }
+            : null,
+        };
+      }),
+    },
+    isVisibleInNavigation: true,
+  };
+}
+
+function transformDataToBlogPost(apiResponse: StrapiPostResponse, vanityUrl: string) {
+  return {
+    author: apiResponse.data.attributes.author,
+    htmlBody: null,
+    content: apiResponse.data.attributes.content,
+    id: apiResponse.data.id,
+    name: apiResponse.data.attributes.title,
+    publishedDate: { utc: apiResponse.data.attributes.publishedAt },
+    tags: apiResponse.data.attributes.tags.data.map((tag) => tag.attributes.title),
+    thumbnailImage: apiResponse.data.attributes.thumbnail.data
+      ? {
+          altText: apiResponse.data.attributes.thumbnail.data.attributes.alternativeText || '',
+          url:
+            apiResponse.data.attributes.thumbnail.data.attributes.formats.small.url.indexOf(
+              'http',
+            ) === 0
+              ? `${apiResponse.data.attributes.thumbnail.data.attributes.formats.small.url}`
+              : `${process.env.STRAPI_BASE_URL}${apiResponse.data.attributes.thumbnail.data.attributes.formats.small.url}`,
+        }
+      : null,
+    seo: {
+      metaKeywords: apiResponse.data.attributes.meta_keywords,
+      metaDescription: apiResponse.data.attributes.meta_description,
+      pageTitle: apiResponse.data.attributes.title,
+    },
+    isVisibleInNavigation: true,
+    vanityUrl,
+  };
+}
diff --git a/core/lib/strapi/types.ts b/core/lib/strapi/types.ts
new file mode 100644
index 00000000..0b79bd96
--- /dev/null
+++ b/core/lib/strapi/types.ts
@@ -0,0 +1,116 @@
+type PostsListParams = {
+  tagId?: string;
+  limit?: number;
+  before?: string;
+  after?: string;
+  locale?: string;
+};
+
+type SinglePostParams = {
+  blogId: string;
+  locale?: string;
+};
+
+type fetchStrapiDataParams = {
+  endpoint: string;
+};
+
+type StrapiImageFormat = {
+  name: string;
+  hash: string;
+  ext: string;
+  mime: string;
+  path: string | null;
+  width: number;
+  height: number;
+  size: number;
+  sizeInBytes: number;
+  url: string;
+};
+
+type StrapiImageAttributes = {
+  name: string;
+  alternativeText: string | null;
+  caption: string | null;
+  width: number;
+  height: number;
+  formats: {
+    thumbnail: StrapiImageFormat;
+    small: StrapiImageFormat;
+    medium: StrapiImageFormat;
+    large: StrapiImageFormat;
+  };
+  hash: string;
+  ext: string;
+  mime: string;
+  size: number;
+  url: string;
+  previewUrl: string | null;
+  provider: string;
+  provider_metadata: any;
+  createdAt: string;
+  updatedAt: string;
+};
+
+type StrapiImage = {
+  data: {
+    id: number;
+    attributes: StrapiImageAttributes;
+  } | null;
+};
+
+type StrapiPost = {
+  id: number;
+  attributes: {
+    title: string;
+    content: {
+      type: string;
+      children: {
+        type: string;
+        text?: string;
+        bold?: boolean;
+      }[];
+      level?: number;
+      image?: StrapiImageAttributes;
+    }[];
+    slug: string;
+    createdAt: string;
+    updatedAt: string;
+    publishedAt: string;
+    locale: string;
+    meta_keywords: string | null;
+    meta_description: string | null;
+    author: any;
+    thumbnail: StrapiImage;
+    tags: {
+      data: {
+        id: number;
+        attributes: {
+          title: string;
+          createdAt: string;
+          updatedAt: string;
+          locale: string;
+        };
+      }[];
+    };
+    localizations: {
+      data: any[];
+    };
+  };
+};
+
+type StrapiPostsResponse = {
+  data: StrapiPost[];
+  meta: {
+    pagination: {
+      start: number;
+      limit: number;
+      total: number;
+    };
+  };
+};
+
+type StrapiPostResponse = {
+  data: StrapiPost;
+  meta: {};
+};
