/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment MoneyFields on Money {\n    currencyCode\n    value\n  }\n": types.MoneyFieldsFragmentDoc,
    "\n  fragment PageDetails on PageInfo {\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    endCursor\n  }\n": types.PageDetailsFragmentDoc,
    "\n  fragment ProductDetails on Product {\n    entityId\n    name\n    path\n    prices {\n      basePrice {\n        value\n        currencyCode\n      }\n      price {\n        value\n        currencyCode\n      }\n      retailPrice {\n        value\n        currencyCode\n      }\n      salePrice {\n        value\n        currencyCode\n      }\n      priceRange {\n        min {\n          value\n          currencyCode\n        }\n        max {\n          value\n          currencyCode\n        }\n      }\n    }\n    brand {\n      name\n    }\n    defaultImage {\n      url(width: $imageWidth, height: $imageHeight)\n      altText\n    }\n  }\n": types.ProductDetailsFragmentDoc,
    "\n  fragment WebPage on WebPage {\n    __typename\n    entityId\n    parentEntityId\n    name\n    isVisibleInNavigation\n  }\n": types.WebPageFragmentDoc,
    "\n  mutation AddCartLineItem($input: AddCartLineItemsInput!) {\n    cart {\n      addCartLineItems(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.AddCartLineItemDocument,
    "\n  mutation AssignCartToCustomer($assignCartToCustomerInput: AssignCartToCustomerInput!) {\n    cart {\n      assignCartToCustomer(input: $assignCartToCustomerInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.AssignCartToCustomerDocument,
    "\n  mutation CreateCart($createCartInput: CreateCartInput!) {\n    cart {\n      createCart(input: $createCartInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.CreateCartDocument,
    "\n  mutation DeleteCartLineItem($input: DeleteCartLineItemInput!) {\n    cart {\n      deleteCartLineItem(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.DeleteCartLineItemDocument,
    "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      customer {\n        entityId\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation UnassignCartFromCustomer(\n    $unassignCartFromCustomerInput: UnassignCartFromCustomerInput!\n  ) {\n    cart {\n      unassignCartFromCustomer(input: $unassignCartFromCustomerInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.UnassignCartFromCustomerDocument,
    "\n  mutation UpdateCartLineItem($input: UpdateCartLineItemInput!) {\n    cart {\n      updateCartLineItem(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n": types.UpdateCartLineItemDocument,
    "\n  query getBestSellingProducts($first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      bestSellingProducts(first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n          }\n        }\n      }\n    }\n  }\n": types.GetBestSellingProductsDocument,
    "\n  query getBlogPost($entityId: Int!) {\n    site {\n      content {\n        blog {\n          isVisibleInNavigation\n          post(entityId: $entityId) {\n            author\n            htmlBody\n            id\n            name\n            publishedDate {\n              utc\n            }\n            tags\n            thumbnailImage {\n              altText\n              url(width: 900)\n            }\n            seo {\n              metaKeywords\n              metaDescription\n              pageTitle\n            }\n          }\n        }\n      }\n      settings {\n        url {\n          vanityUrl\n        }\n      }\n    }\n  }\n": types.GetBlogPostDocument,
    "\n  query getBlogPosts(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filters: BlogPostsFiltersInput\n  ) {\n    site {\n      content {\n        blog {\n          id\n          isVisibleInNavigation\n          name\n          posts(first: $first, after: $after, last: $last, before: $before, filters: $filters) {\n            pageInfo {\n              ...PageDetails\n            }\n            edges {\n              node {\n                author\n                entityId\n                htmlBody\n                name\n                path\n                plainTextSummary\n                publishedDate {\n                  utc\n                }\n                thumbnailImage {\n                  url(width: 300)\n                  altText\n                }\n                seo {\n                  metaKeywords\n                  metaDescription\n                  pageTitle\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBlogPostsDocument,
    "\n  query getBrand($entityId: Int!) {\n    site {\n      brand(entityId: $entityId) {\n        entityId\n        name\n        path\n      }\n    }\n  }\n": types.GetBrandDocument,
    "\n  query getBrands($first: Int, $entityIds: [Int!]) {\n    site {\n      brands(first: $first, entityIds: $entityIds) {\n        edges {\n          node {\n            entityId\n            name\n            path\n          }\n        }\n      }\n    }\n  }\n": types.GetBrandsDocument,
    "\n  query getCart($cartId: String) {\n    site {\n      cart(entityId: $cartId) {\n        entityId\n        isTaxIncluded\n        currencyCode\n        lineItems {\n          totalQuantity\n          physicalItems {\n            name\n            brand\n            imageUrl\n            entityId\n            quantity\n            productEntityId\n            variantEntityId\n            extendedListPrice {\n              ...MoneyFields\n            }\n            extendedSalePrice {\n              ...MoneyFields\n            }\n            discountedAmount {\n              ...MoneyFields\n            }\n            selectedOptions {\n              __typename\n              entityId\n              name\n              ... on CartSelectedMultipleChoiceOption {\n                value\n              }\n              ... on CartSelectedCheckboxOption {\n                value\n              }\n              ... on CartSelectedNumberFieldOption {\n                number\n              }\n              ... on CartSelectedMultiLineTextFieldOption {\n                text\n              }\n              ... on CartSelectedTextFieldOption {\n                text\n              }\n              ... on CartSelectedDateFieldOption {\n                date {\n                  utc\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCartDocument,
    "\n  query getCategory(\n    $after: String\n    $before: String\n    $breadcrumbDepth: Int!\n    $categoryId: Int!\n    $first: Int\n    $last: Int\n  ) {\n    site {\n      category(entityId: $categoryId) {\n        name\n        description\n        path\n        products(after: $after, before: $before, first: $first, last: $last) {\n          pageInfo {\n            ...PageDetails\n          }\n          edges {\n            node {\n              entityId\n              name\n              path\n              brand {\n                name\n              }\n              prices {\n                price {\n                  value\n                }\n              }\n              defaultImage {\n                url(width: 300)\n                altText\n              }\n            }\n          }\n        }\n        breadcrumbs(depth: $breadcrumbDepth) {\n          edges {\n            node {\n              entityId\n              name\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCategoryDocument,
    "\n  query getCategoryTree($categoryId: Int) {\n    site {\n      categoryTree(rootEntityId: $categoryId) {\n        entityId\n        name\n        path\n        children {\n          entityId\n          name\n          path\n          children {\n            entityId\n            name\n            path\n          }\n        }\n      }\n    }\n  }\n": types.GetCategoryTreeDocument,
    "\n  query getFeaturedProducts($first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      featuredProducts(first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n          }\n        }\n      }\n    }\n  }\n": types.GetFeaturedProductsDocument,
    "\n  fragment Prices on Product {\n    prices {\n      basePrice {\n        currencyCode\n        value\n      }\n      price {\n        currencyCode\n        value\n      }\n      retailPrice {\n        currencyCode\n        value\n      }\n      salePrice {\n        currencyCode\n        value\n      }\n      priceRange {\n        min {\n          value\n          currencyCode\n        }\n        max {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n": types.PricesFragmentDoc,
    "\n  fragment BasicProduct on Product {\n    id\n    entityId\n    name\n    path\n    brand {\n      name\n      path\n    }\n    ...Prices\n  }\n": types.BasicProductFragmentDoc,
    "\n  fragment ProductOptions on Product {\n    productOptions(first: 10) {\n      edges {\n        node {\n          entityId\n          displayName\n          isRequired\n          isVariantOption\n          ... on MultipleChoiceOption {\n            __typename\n            displayStyle\n            values(first: 10) {\n              edges {\n                node {\n                  entityId\n                  label\n                  isDefault\n                  isSelected\n                  ... on SwatchOptionValue {\n                    __typename\n                    hexColors\n                    imageUrl(width: 36)\n                  }\n                  ... on ProductPickListOptionValue {\n                    __typename\n                    defaultImage {\n                      altText\n                      url(width: 48)\n                    }\n                    productId\n                  }\n                }\n              }\n            }\n          }\n          ... on CheckboxOption {\n            __typename\n            checkedByDefault\n            label\n            checkedOptionValueEntityId\n            uncheckedOptionValueEntityId\n          }\n          ... on NumberFieldOption {\n            __typename\n            defaultNumber: defaultValue\n            highest\n            isIntegerOnly\n            limitNumberBy\n            lowest\n          }\n          ... on TextFieldOption {\n            __typename\n            defaultText: defaultValue\n            maxLength\n            minLength\n          }\n          ... on MultiLineTextFieldOption {\n            __typename\n            defaultText: defaultValue\n            maxLength\n            minLength\n            maxLines\n          }\n          ... on DateFieldOption {\n            __typename\n            defaultDate: defaultValue\n            earliest\n            latest\n            limitDateBy\n          }\n        }\n      }\n    }\n  }\n": types.ProductOptionsFragmentDoc,
    "\n  query getProduct($productId: Int!, $optionValueIds: [OptionValueId!]) {\n    site {\n      product(entityId: $productId, optionValueIds: $optionValueIds) {\n        ...BasicProduct\n        sku\n        warranty\n        description\n        plainTextDescription(characterLimit: 2000)\n        defaultImage {\n          altText\n          url(width: 600)\n        }\n        images {\n          edges {\n            node {\n              altText\n              url(width: 600)\n              isDefault\n            }\n          }\n        }\n        availabilityV2 {\n          status\n          description\n        }\n        upc\n        path\n        mpn\n        gtin\n        condition\n        reviewSummary {\n          summationOfRatings\n          numberOfReviews\n          averageRating\n        }\n        weight {\n          unit\n          value\n        }\n        seo {\n          pageTitle\n          metaKeywords\n          metaDescription\n        }\n        customFields {\n          edges {\n            node {\n              name\n              entityId\n              value\n            }\n          }\n        }\n        categories(first: 1) {\n          edges {\n            node {\n              name\n              breadcrumbs(depth: 5) {\n                edges {\n                  node {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        minPurchaseQuantity\n        maxPurchaseQuantity\n        ...ProductOptions\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query getProductReviews($entityId: Int!) {\n    site {\n      product(entityId: $entityId) {\n        reviewSummary {\n          summationOfRatings\n          numberOfReviews\n          averageRating\n        }\n        reviews(first: 5) {\n          edges {\n            node {\n              author {\n                name\n              }\n              entityId\n              title\n              text\n              rating\n              createdAt {\n                utc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductReviewsDocument,
    "\n  query getProductSearchResults(\n    $first: Int\n    $after: String\n    $filters: SearchProductsFiltersInput!\n    $sort: SearchProductsSortInput\n  ) {\n    site {\n      search {\n        searchProducts(filters: $filters, sort: $sort) {\n          products(first: $first, after: $after) {\n            pageInfo {\n              ...PageDetails\n            }\n            collectionInfo {\n              totalItems\n            }\n            edges {\n              node {\n                entityId\n                name\n                path\n                brand {\n                  name\n                }\n                ...Prices\n                defaultImage {\n                  url(width: 300)\n                  altText\n                }\n                productOptions(first: 3) {\n                  edges {\n                    node {\n                      entityId\n                    }\n                  }\n                }\n                reviewSummary {\n                  summationOfRatings\n                  numberOfReviews\n                  averageRating\n                }\n              }\n            }\n          }\n          filters {\n            edges {\n              node {\n                __typename\n                name\n                isCollapsedByDefault\n                ... on BrandSearchFilter {\n                  displayProductCount\n                  brands {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        entityId\n                        name\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on CategorySearchFilter {\n                  displayProductCount\n                  categories {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        entityId\n                        name\n                        isSelected\n                        productCount\n                        subCategories {\n                          pageInfo {\n                            ...PageDetails\n                          }\n                          edges {\n                            cursor\n                            node {\n                              entityId\n                              name\n                              isSelected\n                              productCount\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                ... on ProductAttributeSearchFilter {\n                  displayProductCount\n                  filterName\n                  attributes {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        value\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on RatingSearchFilter {\n                  ratings {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        value\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on PriceSearchFilter {\n                  selected {\n                    minPrice\n                    maxPrice\n                  }\n                }\n                ... on OtherSearchFilter {\n                  displayProductCount\n                  freeShipping {\n                    isSelected\n                    productCount\n                  }\n                  isFeatured {\n                    isSelected\n                    productCount\n                  }\n                  isInStock {\n                    isSelected\n                    productCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductSearchResultsDocument,
    "\n  query getProducts($entityIds: [Int!], $first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      products(entityIds: $entityIds, first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n            description\n            availabilityV2 {\n              status\n            }\n            inventory {\n              aggregated {\n                availableToSell\n              }\n            }\n            reviewSummary {\n              averageRating\n              numberOfReviews\n            }\n            productOptions {\n              edges {\n                node {\n                  entityId\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
    "\n  query getQuickSearchResults($filters: SearchProductsFiltersInput!) {\n    site {\n      search {\n        searchProducts(filters: $filters) {\n          products(first: 5) {\n            edges {\n              node {\n                brand {\n                  name\n                  path\n                }\n                categories {\n                  edges {\n                    node {\n                      name\n                      path\n                    }\n                  }\n                }\n                defaultImage {\n                  url(width: 150)\n                  altText\n                }\n                entityId\n                name\n                path\n                ...Prices\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetQuickSearchResultsDocument,
    "\n  query getRelatedProducts(\n    $entityId: Int!\n    $optionValueIds: [OptionValueId!]\n    $first: Int!\n    $imageHeight: Int!\n    $imageWidth: Int!\n  ) {\n    site {\n      product(entityId: $entityId, optionValueIds: $optionValueIds) {\n        relatedProducts(first: $first) {\n          edges {\n            node {\n              ...ProductDetails\n              reviewSummary {\n                summationOfRatings\n                numberOfReviews\n                averageRating\n              }\n              productOptions(first: 3) {\n                edges {\n                  node {\n                    entityId\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetRelatedProductsDocument,
    "\n  query getRoute($path: String!) {\n    site {\n      route(path: $path) {\n        node {\n          __typename\n          ... on Product {\n            entityId\n          }\n          ... on Category {\n            entityId\n          }\n          ... on Brand {\n            entityId\n          }\n        }\n      }\n    }\n  }\n": types.GetRouteDocument,
    "\n  query getStoreSettings {\n    site {\n      settings {\n        storeName\n        logoV2 {\n          __typename\n          ... on StoreTextLogo {\n            text\n          }\n          ... on StoreImageLogo {\n            image {\n              url(width: 155)\n              altText\n            }\n          }\n        }\n        contact {\n          address\n          email\n          phone\n        }\n        socialMediaLinks {\n          name\n          url\n        }\n        status\n        statusMessage\n      }\n    }\n  }\n": types.GetStoreSettingsDocument,
    "\n  query getWebPage($path: String!, $characterLimit: Int = 120) {\n    site {\n      route(path: $path) {\n        node {\n          ... on RawHtmlPage {\n            path\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n          ... on ContactPage {\n            contactFields\n            path\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            renderedRegions {\n              regions {\n                name\n                html\n              }\n            }\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n          ... on NormalPage {\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            renderedRegions {\n              regions {\n                name\n                html\n              }\n            }\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n        }\n      }\n    }\n  }\n": types.GetWebPageDocument,
    "\n  query getWebPages {\n    site {\n      content {\n        pages {\n          edges {\n            node {\n              ...WebPage\n              ... on RawHtmlPage {\n                path\n              }\n              ... on ContactPage {\n                path\n              }\n              ... on NormalPage {\n                path\n              }\n              ... on BlogIndexPage {\n                path\n              }\n              ... on ExternalLinkPage {\n                link\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetWebPagesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MoneyFields on Money {\n    currencyCode\n    value\n  }\n"): typeof import('./graphql').MoneyFieldsFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageDetails on PageInfo {\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    endCursor\n  }\n"): typeof import('./graphql').PageDetailsFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductDetails on Product {\n    entityId\n    name\n    path\n    prices {\n      basePrice {\n        value\n        currencyCode\n      }\n      price {\n        value\n        currencyCode\n      }\n      retailPrice {\n        value\n        currencyCode\n      }\n      salePrice {\n        value\n        currencyCode\n      }\n      priceRange {\n        min {\n          value\n          currencyCode\n        }\n        max {\n          value\n          currencyCode\n        }\n      }\n    }\n    brand {\n      name\n    }\n    defaultImage {\n      url(width: $imageWidth, height: $imageHeight)\n      altText\n    }\n  }\n"): typeof import('./graphql').ProductDetailsFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WebPage on WebPage {\n    __typename\n    entityId\n    parentEntityId\n    name\n    isVisibleInNavigation\n  }\n"): typeof import('./graphql').WebPageFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCartLineItem($input: AddCartLineItemsInput!) {\n    cart {\n      addCartLineItems(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AddCartLineItemDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AssignCartToCustomer($assignCartToCustomerInput: AssignCartToCustomerInput!) {\n    cart {\n      assignCartToCustomer(input: $assignCartToCustomerInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AssignCartToCustomerDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCart($createCartInput: CreateCartInput!) {\n    cart {\n      createCart(input: $createCartInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CreateCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCartLineItem($input: DeleteCartLineItemInput!) {\n    cart {\n      deleteCartLineItem(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').DeleteCartLineItemDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      customer {\n        entityId\n      }\n    }\n  }\n"): typeof import('./graphql').LoginDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnassignCartFromCustomer(\n    $unassignCartFromCustomerInput: UnassignCartFromCustomerInput!\n  ) {\n    cart {\n      unassignCartFromCustomer(input: $unassignCartFromCustomerInput) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').UnassignCartFromCustomerDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCartLineItem($input: UpdateCartLineItemInput!) {\n    cart {\n      updateCartLineItem(input: $input) {\n        cart {\n          entityId\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateCartLineItemDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBestSellingProducts($first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      bestSellingProducts(first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetBestSellingProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBlogPost($entityId: Int!) {\n    site {\n      content {\n        blog {\n          isVisibleInNavigation\n          post(entityId: $entityId) {\n            author\n            htmlBody\n            id\n            name\n            publishedDate {\n              utc\n            }\n            tags\n            thumbnailImage {\n              altText\n              url(width: 900)\n            }\n            seo {\n              metaKeywords\n              metaDescription\n              pageTitle\n            }\n          }\n        }\n      }\n      settings {\n        url {\n          vanityUrl\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetBlogPostDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBlogPosts(\n    $first: Int\n    $after: String\n    $last: Int\n    $before: String\n    $filters: BlogPostsFiltersInput\n  ) {\n    site {\n      content {\n        blog {\n          id\n          isVisibleInNavigation\n          name\n          posts(first: $first, after: $after, last: $last, before: $before, filters: $filters) {\n            pageInfo {\n              ...PageDetails\n            }\n            edges {\n              node {\n                author\n                entityId\n                htmlBody\n                name\n                path\n                plainTextSummary\n                publishedDate {\n                  utc\n                }\n                thumbnailImage {\n                  url(width: 300)\n                  altText\n                }\n                seo {\n                  metaKeywords\n                  metaDescription\n                  pageTitle\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetBlogPostsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBrand($entityId: Int!) {\n    site {\n      brand(entityId: $entityId) {\n        entityId\n        name\n        path\n      }\n    }\n  }\n"): typeof import('./graphql').GetBrandDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBrands($first: Int, $entityIds: [Int!]) {\n    site {\n      brands(first: $first, entityIds: $entityIds) {\n        edges {\n          node {\n            entityId\n            name\n            path\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetBrandsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCart($cartId: String) {\n    site {\n      cart(entityId: $cartId) {\n        entityId\n        isTaxIncluded\n        currencyCode\n        lineItems {\n          totalQuantity\n          physicalItems {\n            name\n            brand\n            imageUrl\n            entityId\n            quantity\n            productEntityId\n            variantEntityId\n            extendedListPrice {\n              ...MoneyFields\n            }\n            extendedSalePrice {\n              ...MoneyFields\n            }\n            discountedAmount {\n              ...MoneyFields\n            }\n            selectedOptions {\n              __typename\n              entityId\n              name\n              ... on CartSelectedMultipleChoiceOption {\n                value\n              }\n              ... on CartSelectedCheckboxOption {\n                value\n              }\n              ... on CartSelectedNumberFieldOption {\n                number\n              }\n              ... on CartSelectedMultiLineTextFieldOption {\n                text\n              }\n              ... on CartSelectedTextFieldOption {\n                text\n              }\n              ... on CartSelectedDateFieldOption {\n                date {\n                  utc\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategory(\n    $after: String\n    $before: String\n    $breadcrumbDepth: Int!\n    $categoryId: Int!\n    $first: Int\n    $last: Int\n  ) {\n    site {\n      category(entityId: $categoryId) {\n        name\n        description\n        path\n        products(after: $after, before: $before, first: $first, last: $last) {\n          pageInfo {\n            ...PageDetails\n          }\n          edges {\n            node {\n              entityId\n              name\n              path\n              brand {\n                name\n              }\n              prices {\n                price {\n                  value\n                }\n              }\n              defaultImage {\n                url(width: 300)\n                altText\n              }\n            }\n          }\n        }\n        breadcrumbs(depth: $breadcrumbDepth) {\n          edges {\n            node {\n              entityId\n              name\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetCategoryDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoryTree($categoryId: Int) {\n    site {\n      categoryTree(rootEntityId: $categoryId) {\n        entityId\n        name\n        path\n        children {\n          entityId\n          name\n          path\n          children {\n            entityId\n            name\n            path\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetCategoryTreeDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getFeaturedProducts($first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      featuredProducts(first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetFeaturedProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Prices on Product {\n    prices {\n      basePrice {\n        currencyCode\n        value\n      }\n      price {\n        currencyCode\n        value\n      }\n      retailPrice {\n        currencyCode\n        value\n      }\n      salePrice {\n        currencyCode\n        value\n      }\n      priceRange {\n        min {\n          value\n          currencyCode\n        }\n        max {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').PricesFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BasicProduct on Product {\n    id\n    entityId\n    name\n    path\n    brand {\n      name\n      path\n    }\n    ...Prices\n  }\n"): typeof import('./graphql').BasicProductFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductOptions on Product {\n    productOptions(first: 10) {\n      edges {\n        node {\n          entityId\n          displayName\n          isRequired\n          isVariantOption\n          ... on MultipleChoiceOption {\n            __typename\n            displayStyle\n            values(first: 10) {\n              edges {\n                node {\n                  entityId\n                  label\n                  isDefault\n                  isSelected\n                  ... on SwatchOptionValue {\n                    __typename\n                    hexColors\n                    imageUrl(width: 36)\n                  }\n                  ... on ProductPickListOptionValue {\n                    __typename\n                    defaultImage {\n                      altText\n                      url(width: 48)\n                    }\n                    productId\n                  }\n                }\n              }\n            }\n          }\n          ... on CheckboxOption {\n            __typename\n            checkedByDefault\n            label\n            checkedOptionValueEntityId\n            uncheckedOptionValueEntityId\n          }\n          ... on NumberFieldOption {\n            __typename\n            defaultNumber: defaultValue\n            highest\n            isIntegerOnly\n            limitNumberBy\n            lowest\n          }\n          ... on TextFieldOption {\n            __typename\n            defaultText: defaultValue\n            maxLength\n            minLength\n          }\n          ... on MultiLineTextFieldOption {\n            __typename\n            defaultText: defaultValue\n            maxLength\n            minLength\n            maxLines\n          }\n          ... on DateFieldOption {\n            __typename\n            defaultDate: defaultValue\n            earliest\n            latest\n            limitDateBy\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ProductOptionsFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProduct($productId: Int!, $optionValueIds: [OptionValueId!]) {\n    site {\n      product(entityId: $productId, optionValueIds: $optionValueIds) {\n        ...BasicProduct\n        sku\n        warranty\n        description\n        plainTextDescription(characterLimit: 2000)\n        defaultImage {\n          altText\n          url(width: 600)\n        }\n        images {\n          edges {\n            node {\n              altText\n              url(width: 600)\n              isDefault\n            }\n          }\n        }\n        availabilityV2 {\n          status\n          description\n        }\n        upc\n        path\n        mpn\n        gtin\n        condition\n        reviewSummary {\n          summationOfRatings\n          numberOfReviews\n          averageRating\n        }\n        weight {\n          unit\n          value\n        }\n        seo {\n          pageTitle\n          metaKeywords\n          metaDescription\n        }\n        customFields {\n          edges {\n            node {\n              name\n              entityId\n              value\n            }\n          }\n        }\n        categories(first: 1) {\n          edges {\n            node {\n              name\n              breadcrumbs(depth: 5) {\n                edges {\n                  node {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        minPurchaseQuantity\n        maxPurchaseQuantity\n        ...ProductOptions\n      }\n    }\n  }\n"): typeof import('./graphql').GetProductDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductReviews($entityId: Int!) {\n    site {\n      product(entityId: $entityId) {\n        reviewSummary {\n          summationOfRatings\n          numberOfReviews\n          averageRating\n        }\n        reviews(first: 5) {\n          edges {\n            node {\n              author {\n                name\n              }\n              entityId\n              title\n              text\n              rating\n              createdAt {\n                utc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetProductReviewsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductSearchResults(\n    $first: Int\n    $after: String\n    $filters: SearchProductsFiltersInput!\n    $sort: SearchProductsSortInput\n  ) {\n    site {\n      search {\n        searchProducts(filters: $filters, sort: $sort) {\n          products(first: $first, after: $after) {\n            pageInfo {\n              ...PageDetails\n            }\n            collectionInfo {\n              totalItems\n            }\n            edges {\n              node {\n                entityId\n                name\n                path\n                brand {\n                  name\n                }\n                ...Prices\n                defaultImage {\n                  url(width: 300)\n                  altText\n                }\n                productOptions(first: 3) {\n                  edges {\n                    node {\n                      entityId\n                    }\n                  }\n                }\n                reviewSummary {\n                  summationOfRatings\n                  numberOfReviews\n                  averageRating\n                }\n              }\n            }\n          }\n          filters {\n            edges {\n              node {\n                __typename\n                name\n                isCollapsedByDefault\n                ... on BrandSearchFilter {\n                  displayProductCount\n                  brands {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        entityId\n                        name\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on CategorySearchFilter {\n                  displayProductCount\n                  categories {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        entityId\n                        name\n                        isSelected\n                        productCount\n                        subCategories {\n                          pageInfo {\n                            ...PageDetails\n                          }\n                          edges {\n                            cursor\n                            node {\n                              entityId\n                              name\n                              isSelected\n                              productCount\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                ... on ProductAttributeSearchFilter {\n                  displayProductCount\n                  filterName\n                  attributes {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        value\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on RatingSearchFilter {\n                  ratings {\n                    pageInfo {\n                      ...PageDetails\n                    }\n                    edges {\n                      cursor\n                      node {\n                        value\n                        isSelected\n                        productCount\n                      }\n                    }\n                  }\n                }\n                ... on PriceSearchFilter {\n                  selected {\n                    minPrice\n                    maxPrice\n                  }\n                }\n                ... on OtherSearchFilter {\n                  displayProductCount\n                  freeShipping {\n                    isSelected\n                    productCount\n                  }\n                  isFeatured {\n                    isSelected\n                    productCount\n                  }\n                  isInStock {\n                    isSelected\n                    productCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetProductSearchResultsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducts($entityIds: [Int!], $first: Int, $imageHeight: Int!, $imageWidth: Int!) {\n    site {\n      products(entityIds: $entityIds, first: $first) {\n        edges {\n          node {\n            ...ProductDetails\n            description\n            availabilityV2 {\n              status\n            }\n            inventory {\n              aggregated {\n                availableToSell\n              }\n            }\n            reviewSummary {\n              averageRating\n              numberOfReviews\n            }\n            productOptions {\n              edges {\n                node {\n                  entityId\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getQuickSearchResults($filters: SearchProductsFiltersInput!) {\n    site {\n      search {\n        searchProducts(filters: $filters) {\n          products(first: 5) {\n            edges {\n              node {\n                brand {\n                  name\n                  path\n                }\n                categories {\n                  edges {\n                    node {\n                      name\n                      path\n                    }\n                  }\n                }\n                defaultImage {\n                  url(width: 150)\n                  altText\n                }\n                entityId\n                name\n                path\n                ...Prices\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetQuickSearchResultsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRelatedProducts(\n    $entityId: Int!\n    $optionValueIds: [OptionValueId!]\n    $first: Int!\n    $imageHeight: Int!\n    $imageWidth: Int!\n  ) {\n    site {\n      product(entityId: $entityId, optionValueIds: $optionValueIds) {\n        relatedProducts(first: $first) {\n          edges {\n            node {\n              ...ProductDetails\n              reviewSummary {\n                summationOfRatings\n                numberOfReviews\n                averageRating\n              }\n              productOptions(first: 3) {\n                edges {\n                  node {\n                    entityId\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetRelatedProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoute($path: String!) {\n    site {\n      route(path: $path) {\n        node {\n          __typename\n          ... on Product {\n            entityId\n          }\n          ... on Category {\n            entityId\n          }\n          ... on Brand {\n            entityId\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetRouteDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStoreSettings {\n    site {\n      settings {\n        storeName\n        logoV2 {\n          __typename\n          ... on StoreTextLogo {\n            text\n          }\n          ... on StoreImageLogo {\n            image {\n              url(width: 155)\n              altText\n            }\n          }\n        }\n        contact {\n          address\n          email\n          phone\n        }\n        socialMediaLinks {\n          name\n          url\n        }\n        status\n        statusMessage\n      }\n    }\n  }\n"): typeof import('./graphql').GetStoreSettingsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getWebPage($path: String!, $characterLimit: Int = 120) {\n    site {\n      route(path: $path) {\n        node {\n          ... on RawHtmlPage {\n            path\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n          ... on ContactPage {\n            contactFields\n            path\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            renderedRegions {\n              regions {\n                name\n                html\n              }\n            }\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n          ... on NormalPage {\n            htmlBody\n            plainTextSummary(characterLimit: $characterLimit)\n            renderedRegions {\n              regions {\n                name\n                html\n              }\n            }\n            seo {\n              pageTitle\n              metaKeywords\n              metaDescription\n            }\n            ...WebPage\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetWebPageDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getWebPages {\n    site {\n      content {\n        pages {\n          edges {\n            node {\n              ...WebPage\n              ... on RawHtmlPage {\n                path\n              }\n              ... on ContactPage {\n                path\n              }\n              ... on NormalPage {\n                path\n              }\n              ... on BlogIndexPage {\n                path\n              }\n              ... on ExternalLinkPage {\n                link\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetWebPagesDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
